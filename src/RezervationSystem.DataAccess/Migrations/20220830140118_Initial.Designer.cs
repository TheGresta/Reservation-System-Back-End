// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RezervationSystem.DataAccess.Contexts;

#nullable disable

namespace RezervationSystem.DataAccess.Migrations
{
    [DbContext(typeof(RezervationSystemDbContext))]
    [Migration("20220830140118_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Reser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descripton")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Resers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address line",
                            Descripton = "description",
                            Name = "Halısaha",
                            Price = 1m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address line",
                            Descripton = "description",
                            Name = "Halısaha 2",
                            Price = 1m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address line",
                            Descripton = "description",
                            Name = "Halısaha 3",
                            Price = 1m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.ReserRent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReserId");

                    b.ToTable("ReserRents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 0,
                            EndDate = new DateTime(2022, 9, 2, 17, 1, 18, 321, DateTimeKind.Local).AddTicks(5968),
                            ReserId = 1,
                            StartDate = new DateTime(2022, 8, 30, 17, 1, 18, 321, DateTimeKind.Local).AddTicks(5957)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 0,
                            EndDate = new DateTime(2022, 9, 2, 17, 1, 18, 321, DateTimeKind.Local).AddTicks(5972),
                            ReserId = 2,
                            StartDate = new DateTime(2022, 8, 30, 17, 1, 18, 321, DateTimeKind.Local).AddTicks(5971)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 0,
                            EndDate = new DateTime(2022, 9, 2, 17, 1, 18, 321, DateTimeKind.Local).AddTicks(5973),
                            ReserId = 3,
                            StartDate = new DateTime(2022, 8, 30, 17, 1, 18, 321, DateTimeKind.Local).AddTicks(5972)
                        });
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.ReserRent", b =>
                {
                    b.HasOne("RezervationSystem.Entity.Concrete.Reser", "Reser")
                        .WithMany("ObjectRents")
                        .HasForeignKey("ReserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reser");
                });

            modelBuilder.Entity("RezervationSystem.Entity.Concrete.Reser", b =>
                {
                    b.Navigation("ObjectRents");
                });
#pragma warning restore 612, 618
        }
    }
}
